name: Sync Rules

on:
  schedule:
    - cron: '0 4 * * *'  # Runs every day at 4:00 AM UTC
  workflow_dispatch:  # Allows manual triggering
  push:
    paths:
      - 'rules-list.txt' # Triggers when rules-list.txt is modified

permissions:
  contents: write

jobs:
  sync_rules:
    runs-on: ubuntu-latest

    env:
      RULES_LIST_FILE: 'rules-list.txt'
      RULES_OUTPUT_DIR: 'rules'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read Rules List
        id: read_rules
        run: |
          if [[ -f "${{ env.RULES_LIST_FILE }}" ]]; then
            RULES=$(cat "${{ env.RULES_LIST_FILE }}")
            echo "rules<<EOF" >> $GITHUB_OUTPUT
            echo "$RULES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "::error file=${{ env.RULES_LIST_FILE }}::Rules list file not found: ${{ env.RULES_LIST_FILE }}"
            exit 1
          fi

      - name: Download and Process Rules
        id: download_rules
        run: |
          mkdir -p "${{ env.RULES_OUTPUT_DIR }}"
          RULES="${{ steps.read_rules.outputs.rules }}"
          IFS=$'\n'
          for RULE_URL in $RULES; do
            if [[ -z "$RULE_URL" ]]; then
              continue # Skip empty lines
            fi

            FILENAME=$(basename "$RULE_URL")
            PATH_SEGMENT=$(echo "$RULE_URL" | awk -F'/' '{print $(NF-1)}') # Extract the second to last segment
            NEW_FILENAME="${PATH_SEGMENT}_${FILENAME}"
            OUTPUT_PATH="${{ env.RULES_OUTPUT_DIR }}/${NEW_FILENAME}"

            echo "Downloading: $RULE_URL to $OUTPUT_PATH"

            curl -sSf "$RULE_URL" -o "$OUTPUT_PATH"
            if [ $? -ne 0 ]; then
              echo "::warning file=$RULE_URL::Failed to download $RULE_URL"
            else
              echo "Downloaded $RULE_URL successfully."
            fi
          done

      - name: Check for changes
        id: check_changes
        run: |
          git add "${{ env.RULES_OUTPUT_DIR }}"/*
          git diff --quiet --exit-code || echo "::set-output name=changed::true"

      - name: Commit and Push changes
        if: steps.check_changes.outputs.changed == 'true'
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git commit -m "Update rules from ${{ env.RULES_LIST_FILE }}"
          git push
