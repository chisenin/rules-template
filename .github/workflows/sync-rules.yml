name: Sync Rules Files
on:
  workflow_dispatch: # 手动触发
  schedule:
    - cron: '0 20 * * *' # UTC时间每天20:00（北京时间次日4:00）
  push:
    paths:
      - 'rules-list.txt' # 文件变动触发

env:
  INPUT_LIST: rules-list.txt
  OUTPUT_DIR: rules

jobs:
  sync-files:
    runs-on: ubuntu-latest
    concurrency: sync-rules  # 防止并发执行

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Check if rules-list.txt exists
      id: check_file
      uses: andstor/file-existence-action@v3
      with:
        files: ${{ env.INPUT_LIST }}

    - name: Create output directory
      if: steps.check_file.outputs.files_exists == 'true'
      run: mkdir -p ${{ env.OUTPUT_DIR }}

    - name: Download and rename files
      if: steps.check_file.outputs.files_exists == 'true'
      run: |
        while IFS= read -r url; do
          if [[ -n "$url" ]]; then
            # 校验 URL 格式
            if ! [[ "$url" =~ ^(http|https):// ]]; then
              echo "Invalid URL: $url"
              continue
            fi

            # 提取URL路径最后两个段（如 geoip/telegram.srs → geoip_telegram.srs）
            path_segment=$(echo "$url" | awk -F/ '{print $(NF-1)"_"$NF}')

            # 检查文件名是否为空
            if [[ -z "$path_segment" ]]; then
              echo "Error: Could not extract filename from URL: $url"
              continue
            fi

            # 下载文件，并处理错误
            if curl -sL "$url" -o "${{ env.OUTPUT_DIR }}/$path_segment"; then
              echo "Downloaded: $url → $path_segment"
            else
              echo "Failed to download: $url"
            fi
          fi
        done < ${{ env.INPUT_LIST }}

    - name: Show result
      if: steps.check_file.outputs.files_exists == 'true'
      run: ls -lh ${{ env.OUTPUT_DIR }}

    - name: Error - rules-list.txt not found
      if: steps.check_file.outputs.files_exists == 'false'
      run: echo "Error: rules-list.txt not found. Workflow will exit."
