name: Sync Rules

on:
  # 触发条件：手动触发、定时触发、rules-list.txt 文件变化触发
  workflow_dispatch: # 手动触发
  schedule:
    - cron: '0 4 * * *' # 每天凌晨 4 点定时触发
  push:
    paths:
      - 'rules-list.txt' # 仅当 rules-list.txt 文件变化时触发

jobs:
  process-rules:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3 # 检出代码仓库

      - name: Create rules directory
        run: mkdir -p rules # 创建输出目录 rules（如果不存在）

      - name: Check if mapping.csv exists
        id: check-mapping
        run: |
          if test -f "mapping.csv"; then
            echo "mapping_exists=true" >> $GITHUB_OUTPUT
          else
            echo "mapping_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Handle file name conflicts
        run: |
          # 处理文件名冲突
          # 创建 temp_mapping.csv
          echo "url,remote_file_name,local_file_name,hash" > temp_mapping.csv

          # 如果 mapping.csv 存在，将其内容写入 temp_mapping.csv
          if [[ -f "mapping.csv" ]]; then
            cat mapping.csv >> temp_mapping.csv
          fi

          # 读取 rules-list.txt，比对 temp_mapping.csv
          while IFS= read -r url; do
            if ! grep -q "$url" temp_mapping.csv; then
              echo "$url,,," >> temp_mapping.csv # 如果 URL 不存在，则添加到 temp_mapping.csv
            fi
          done < rules-list.txt

          # 如果 rules-list.txt 中没有的 URL，从 temp_mapping.csv 中删除
          while IFS= read -r url; do
            if ! grep -q "$url" rules-list.txt; then
              local_file_name=$(grep "$url" temp_mapping.csv | cut -d',' -f3)
              echo "$local_file_name" >> del_list.txt # 记录需要删除的文件名到 del_list.txt
              sed -i "/$url/d" temp_mapping.csv # 从 temp_mapping.csv 中删除表项
            fi
          done < <(cut -d',' -f1 temp_mapping.csv | grep -v 'url')

          # 填充远程文件名并处理冲突
          sed -i '1d' temp_mapping.csv # 删除表头
          while IFS= read -r entry; do
            url=$(echo "$entry" | cut -d',' -f1)
            remote_file_name=$(basename "$url")
            echo "$url,$remote_file_name,,$(echo "$entry" | cut -d',' -f4)" >> temp_mapping.tmp
          done < temp_mapping.csv

          mv temp_mapping.tmp temp_mapping.csv

      - name: Update files
        run: |
          # 更新文件
          while IFS= read -r entry; do
            url=$(echo "$entry" | cut -d',' -f1)
            remote_file_name=$(echo "$entry" | cut -d',' -f2)
            local_file_name=$(echo "$entry" | cut -d',' -f3)
            hash=$(echo "$entry" | cut -d',' -f4)

            # 比较哈希值，决定是否需要下载
            if [[ -f "rules/$local_file_name" ]]; then
              current_hash=$(sha256sum "rules/$local_file_name" | awk '{print $1}')
              if [[ "$current_hash" == "$hash" ]]; then
                echo "File $local_file_name is up to date."
                continue
              fi
            fi

            # 下载文件
            curl -s -L "$url" -o "rules/$local_file_name"
            new_hash=$(sha256sum "rules/$local_file_name" | awk '{print $1}')
            sed -i "s|$url,$remote_file_name,$local_file_name,$hash|$url,$remote_file_name,$local_file_name,$new_hash|" temp_mapping.csv
          done < temp_mapping.csv

      - name: Clean old files
        run: |
          # 清理旧文件
          if [[ -f "del_list.txt" ]]; then
            while IFS= read -r file; do
              rm -f "rules/$file"
            done < del_list.txt
          fi

      - name: Update mapping file
        run: |
          # 更新映射文件
          if [[ -f "mapping.csv" ]]; then
            cp temp_mapping.csv mapping.csv
            rm -f temp_mapping.csv
          else
            mv temp_mapping.csv mapping.csv
          fi
          rm -f del_list.txt

      - name: Commit changes
        run: |
          # 提交更改
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add rules mapping.csv
          git commit -m "Updated rules and mapping file"
          git push
