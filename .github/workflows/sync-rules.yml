name: Sync Rules Files

on:
  push:
    paths:
      - 'rules-list.txt'
      - '*.csv'  # 允许通过推送CSV文件来更新URL列表
  schedule:
    - cron: '0 4 * * *'
  workflow_dispatch:

env:
  RULES_LIST: rules-list.txt
  OUTPUT_DIR: rules
  CSV_FILE: rules-mapping.csv  # 更明确的文件名

jobs:
  sync-rules:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Create output directory if not exists
      run: mkdir -p ${{ env.OUTPUT_DIR }}

    - name: Verify rules-list.txt exists
      run: |
        if [ ! -f "${{ env.RULES_LIST }}" ]; then
          echo "Error: ${{ env.RULES_LIST }} file does not exist."
          exit 1
        fi

    - name: Read existing CSV file
      id: read_csv
      run: |
        existing_urls=()
        while IFS=',' read -r url local_filename hash; do
          existing_urls+=("$url")
        done < "${{ env.CSV_FILE }}" 2>/dev/null  # 允许CSV文件不存在
        echo "::set-output name=existing_urls::$(printf "%s\n" "${existing_urls[@]}")"

    - name: Generate updated CSV mapping list
      id: generate_csv
      run: |
        > temp_rules-mapping.csv
        echo "URL,Local_Filename,Hash" >> temp_rules-mapping.csv

        declare -A seen_filenames
        declare -A final_filenames

        while IFS= read -r url; do
          # Skip empty lines, comments, and URLs already in the CSV
          if [[ -z "$url" || "$url" == \#* || " ${{ steps.read_csv.outputs.existing_urls }} " =~ " $url " ]]; then
            continue
          fi

          # Ensure the URL has the correct protocol
          if [[ ! "$url" =~ ^https?:// ]]; then
            echo "Invalid URL: $url. URLs must start with http:// or https://"
            continue
          fi

          # Download the file and calculate its hash
          filename=$(basename "$url")
          local_file="${{ env.OUTPUT_DIR }}/$filename"
          temp_file="$local_file.tmp"
          wget --continue -O "$temp_file" "$url" || { echo "Failed to download $url"; continue; }
          file_hash=$(sha256sum "$temp_file" | awk '{print $1}')

          # Determine the final filename to use, handling conflicts
          base_no_ext="${filename%.*}"
          counter=1
          final_filename="$base_no_ext"
          while [[ -n "${seen_filenames[$final_filename]}" ]]; do
            final_filename="${base_no_ext}-${counter}"
            ((counter++))
          done

          # Move the downloaded file to its final location
          mv "$temp_file" "$local_file"

          # Record the URL, final filename, and hash in the CSV
          echo "$url,$local_file,$file_hash" >> temp_rules-mapping.csv

          # Mark the filename as seen
          seen_filenames[$final_filename]=1
          final_filenames["$url"]="$local_file"
        done < "${{ env.RULES_LIST }}"

        # Move the temp CSV to the real CSV file
        mv temp_rules-mapping.csv "${{ env.CSV_FILE }}"

    - name: List files in rules directory
      run: ls -la "${{ env.OUTPUT_DIR }}"

    - name: Add changes to staging
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git add "${{ env.OUTPUT_DIR }}"
        git add "${{ env.CSV_FILE }}"

    - name: Commit changes
      run: |        git
 diff-index --quiet HEAD || git commit -m "Update rules files from rules-list.txt and CSV"
    -
 name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
