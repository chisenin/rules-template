name: Sync Rules Files

on:
  push:
    paths:
      - rules-list.txt
  schedule:
    - cron: '0 4 * * *'
  workflow_dispatch:

env:
  RULES_LIST: rules-list.txt
  OUTPUT_DIR: rules
  MAPPING_FILE: mapping.txt

jobs:
  sync-rules:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Create output directory if not exists
      run: mkdir -p ${{ env.OUTPUT_DIR }}

    - name: Verify rules-list.txt exists
      run: |
        if [ ! -f "${{ env.RULES_LIST }}" ]; then
          echo "Error: ${RULES_LIST} file does not exist."
          exit 1
        fi

    - name: Print contents of rules-list.txt
      run: cat "${{ env.RULES_LIST }}"

    - name: Generate mapping list
      id: generate_mapping
      run: |
        > "${{ env.MAPPING_FILE }}"
        while IFS= read -r url; do
          # Skip empty lines or comments
          if [[ -z "$url" || "$url" == \#* ]]; then
            continue
          fi

          # Ensure the URL has the correct protocol
          if [[ ! "$url" =~ ^https?:// ]]; then
            echo "Invalid URL: $url. URLs must start with http:// or https://"
            continue
          fi

          # Extract the last path segment from URL
          last_segment=$(basename "$(dirname "$url")")
          filename=$(basename "$url")

          # Determine the final filename to use
          final_filename="$filename"
          counter=1

          while [ -f "${{ env.OUTPUT_DIR }}/${final_filename}" ]; do
            # If a file with the same name exists, rename the new file
            extension="${filename##*.}"
            base="${filename%.*}"
            final_filename="${base}-${last_segment}.${extension}"
            echo "File $filename already exists. Renaming to $final_filename."
          done

          # Add entry to mapping file
          echo "$url:$final_filename" >> "${{ env.MAPPING_FILE }}"
        done < "${{ env.RULES_LIST }}"

    - name: Print mapping list
      run: cat "${{ env.MAPPING_FILE }}"

    - name: Download files based on mapping list
      id: download_files
      run: |
        while IFS=: read -r url final_filename; do
          # Skip empty lines or comments
          if [[ -z "$url" || "$url" == \#* ]]; then
            continue
          fi

          local_file="${{ env.OUTPUT_DIR }}/${final_filename}"

          # Check if the file already exists and is up to date
          if [ -f "$local_file" ]; then
            echo "Checking if $final_filename needs updating..."
            current_hash=$(sha256sum "$local_file" | awk '{print $1}')
            new_hash=$(wget --spider --server-response "$url" 2>&1 | grep ETag | awk '{print $2}' | tr -d '"')
            
            if [ "$current_hash" == "$new_hash" ]; then
              echo "$final_filename is already up to date. Skipping download."
              continue
            fi
          fi

          echo "Downloading $url as $final_filename"
          wget --continue -O "$local_file" "$url" || echo "Failed to download $url"
        done < "${{ env.MAPPING_FILE }}"

    - name: List files in rules directory
      run: ls -la "${{ env.OUTPUT_DIR }}"

    - name: Add changes to staging
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git add "${{ env.OUTPUT_DIR }}"

    - name: Commit changes
      run: |
        git diff-index --quiet HEAD || git commit -m "Update rules files from rules-list.txt"

    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
